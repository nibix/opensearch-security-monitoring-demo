#serviceAccount:
##  create: true
#  name: fluent-bit

logLevel: debug

config:
  # The "inputs" section defines where to read logs from. We read here only the opensearch logs and make them available
  # under the opensearch.main-cluster.<path.to.log.file> tag.
  # Docs: https://docs.fluentbit.io/manual/pipeline/inputs/tail
  inputs: |
    [INPUT]
        Name              tail
        Tag               opensearch.logs.*
        Path              /var/log/pods/default_main-cluster-*/opensearch/*.log
        multiline.parser  docker
        Read_from_Head    true
        Refresh_Interval  9
        Skip_Long_Lines   On

  # The "filters" section allows to enrich and filter data. Here, we limit the processed logs to the default K8s namespace.
  # Thus, we are excluding logs from the monitoring cluster.
  # Docs: https://docs.fluentbit.io/manual/pipeline/filters
  # TODO at the moment this fails Request (ns=default, pod=iners.main-cluster-masters-0) http_do=0, HTTP Status: 404
  #filters: |
  #  [FILTER]
  #      Name                kubernetes
  #      Match               opensearch.*
  #      Merge_Log           On
  #      Keep_Log            Off
  #  [FILTER]
  #      Name                grep
  #      Match               opensearch.*
  #      Regex               kubernetes.namespace_name  ^default$


  # The filter of type "parser" is applied to the "log" fields extracted from the docker log output; this is specified
  # using the "key_name" attribute.
  filters: |
    [FILTER]
        name   multiline
        match  opensearch.logs.*
        multiline.key_content log
        multiline.parser opensearch_multiline    
    [FILTER]
        Name   parser
        Match  opensearch.logs.*
        Key_Name log
        Parser opensearch_std_log
        Preserve_Key True
        Reserve_Data True    
    [FILTER]
        Name   parser
        Match  opensearch.logs.*
        Key_Name message
        Parser opensearch_missing_index_privs
        Preserve_Key True
        Reserve_Data True
    [FILTER]
        name   rewrite_tag
        match  opensearch.logs.*
        rule   message ^Index\s+to\s+privilege\s+matrix:  opensearch.index_privilege_matrix false
    [FILTER]
        Name    lua
        Match   opensearch.index_privilege_matrix
        script  /fluent-bit/scripts/privilege-matrix-filter.lua
        call    parse_privilege_matrix

  # Index logs directly to OpenSearch
  # Docs: https://docs.fluentbit.io/manual/pipeline/outputs
  outputs: |
    [OUTPUT]
        Name            opensearch
        Match           opensearch.logs.*
        Host            monitoring-cluster-master.monitoring.svc
        Port            9200
        Index           opensearch-logs
        Suppress_Type_Name On
        Replace_Dots    On
        HTTP_User       fluentbit
        HTTP_Passwd     secret
        TLS             On
        TLS.Verify      Off
    [OUTPUT]
        Name            opensearch
        Match           opensearch.index_privilege_matrix*
        Host            monitoring-cluster-master.monitoring.svc
        Port            9200
        Index           opensearch-missing-index-privileges-logs
        Suppress_Type_Name On
        Replace_Dots    On
        HTTP_User       fluentbit
        HTTP_Passwd     secret
        TLS             On
        TLS.Verify      Off


#    [OUTPUT]
#        Name            http
#        Match           opensearch.index_privilege_matrix*
#        Host            host.docker.internal
#        Port            2021
#        Format          json
#        URI             /log/ingest


  customParsers: |
    [MULTILINE_PARSER]
        Name         opensearch_multiline
        Type         regex
        Flush_Timeout 1000
        Rule      "start_state" "/^\[.*\]\[.*\]\[.*\]/" "cont"
        Rule      "cont"        "/^[^\[]/"         "cont"
    [PARSER]
        Name        opensearch_std_log
        Format      regex
        Regex       ^\[(?<timestamp>[^]]+)\]\[(?<level>[A-Z]+)\s*\]\[(?<class>[^\]]+)\]\s\[(?<node>[^\]]+)\]\[(?<user>[^\]]*)\]\s(?<message>[\S\s]*)
        Time_Key    timestamp
        Time_Format %Y-%m-%dT%H:%M:%S,%L
    [PARSER]
        Name        opensearch_missing_index_privs
        Format      regex
        Regex       ^No (?<privtype>[a-z]+)-level perm match for User \[name=(?<user>[^\],]+),.*?allIndices=\[(?<allIndices>[^\]]*)\].*?Action \[(?<action>[^\]]+)\].*$


luaScripts:
  privilege-matrix-filter.lua: |
      function trim(s)
          return (s:gsub("^%s*(.-)%s*$", "%1"))
      end
      
      function parse_privilege_matrix(tag, timestamp, record)
          local raw = record["log"]
          local actions = {}
          local action_positions = {}
          local missing_by_action = {}
      
          -- Step 1: Split into lines
          local lines = {}
          for line in raw:gmatch("[^\r\n]+") do
              table.insert(lines, line)
          end
      
          if #lines < 2 then
              return 0, timestamp, record  -- Not enough lines to process
          end
      
          -- Step 2: Parse header line to extract action names and positions
          local header = lines[2]
          for pos, action in header:gmatch("()|%s*([^|]+)%s*") do
              local cleaned = trim(action)
              table.insert(actions, cleaned)
              table.insert(action_positions, pos)
              missing_by_action[cleaned] = {}
          end
      
          -- Step 3: Parse each data line using column positions
          for i = 3, #lines do
              local line = lines[i]
              local idx = line:match("^%s*(.-)%s*|")
              if idx then
                  for j, pos in ipairs(action_positions) do
                      local next_pos = action_positions[j + 1] or #line + 1
                      local value = line:sub(pos, next_pos - 1):match("|%s*([^|%s]*)%s*")
                      local action = actions[j]
                      if value == "MISSING" then
                          table.insert(missing_by_action[action], idx)
                      end
                  end
              end
          end
      
          -- Emit a new record per action with missing privileges
          local new_records = {}
          for action, indices in pairs(missing_by_action) do
              if #indices > 0 then
                  local new_record = {
                      missing_privilege = action,
                      indices = indices,
                      log = record["log"],
                      user = record["user"]
                  }
                  table.insert(new_records, new_record)
              end
          end
      
          return 2, timestamp, new_records
      end

      

# Notes:
#
# - The [\S\s]* in (?<message>[\S\s]*) allows to match multi line messages (like stack traces)
# - Be sure to change the tag name in rewrite_tag in such a way that earlier filters do not match it. Otherwise, we will get an infinite loop.
# - luaScripts must be at the top level, not below config