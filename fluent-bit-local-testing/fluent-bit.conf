[SERVICE]
    flush        1
    log_level    trace
    parsers_file custom_parsers.conf

# For testing, do not use exit_on_eof in INPUT, as this will inhibit multiline processing!
[INPUT]
    name        tail
    path        ./input.log
    multiline.parser  docker
    tag               opensearch.logs.std.*
    Read_from_Head    true

[FILTER]
    name   multiline
    match  opensearch.logs.std.*
    multiline.key_content log
    multiline.parser opensearch_multiline
[FILTER]
    name   rewrite_tag
    match  opensearch.logs.std.*
    rule   log  ^\[([^]]+)\]\[([A-Z]+)\s*\]\[auditlog  opensearch.logs.audit false
[FILTER]
    Name   parser
    Match  opensearch.logs.std.*
    Key_Name log
    Parser opensearch_std_log
    Preserve_Key True
    Reserve_Data True
[FILTER]
    Name record_modifier
    Match opensearch.logs.std.*
    Record log_type std
[FILTER]
    Name   parser
    Match  opensearch.logs.std.*
    Key_Name message
    Parser opensearch_missing_index_privs
    Preserve_Key True
    Reserve_Data True
[FILTER]
    name   rewrite_tag
    match  opensearch.logs.std.*
    rule   message ^Index\s+to\s+privilege\s+matrix:  opensearch.index_privilege_matrix false
[FILTER]
    Name    lua
    Match   opensearch.index_privilege_matrix
    script  privilege-matrix-filter.lua
    call    parse_privilege_matrix
[FILTER]
    Name     parser
    Match    opensearch.logs.audit
    Key_Name log
    Parser   auditlog_json_extractor
    Preserve_Key Off
[FILTER]
    Name     parser
    Match    opensearch.logs.audit
    Key_Name log
    Parser   auditlog_json
    Preserve_Key Off
[FILTER]
    Name record_modifier
    Match opensearch.logs.audit
    Record log_type audit

[OUTPUT]
    name        stdout
    match       *